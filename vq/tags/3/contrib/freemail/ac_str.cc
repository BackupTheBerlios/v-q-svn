#include <exception>
#include <iostream>
#include <fstream>
#include <string>
#include <cerrno>

#include "conf_home.h"

using namespace std;
using namespace freemail;

void usage(const char *me) {
	cerr<<"usage: "<<me<<" namespace name [del_lf]"<<endl;
}

int main(int ac, char **av) {
	try {
			if(ac<3) {
					usage(*av);
					return 1;
			}
		
			string file;
			string ln;
			while(getline(cin, ln)) {
					file += ln;
					if( ac != 4 ) file += '\n';
			}

			if( file.empty() ) {
					cerr<<"string is empty"<<endl;
					return 1;
			}

			string ac_conf("auto/");
			ac_conf+=av[2];
			ac_conf+=".cc";
			
			ofstream out(ac_conf.c_str(), ios::trunc);
			out<<"// file autogenerated, don't edit!"<<endl
				<<"#include \"../cconf.h\""<<endl;

			if(*av[1] != '\0') out<<"namespace "<<av[1]<<" {"<<endl;

			out<<"clnconf ac_"<<av[2]<<"(\""<<conf_home
				<<"/etc/freemail/"<<av[2]<<"\",\"";

			string::const_iterator iter, end=file.end();
			for( iter=file.begin(); iter!=end; ++iter ) {
					out<< "\\x" << hex << (int) *iter;
			}

			out<<"\");"<<endl;
			
			if(*av[1] != '\0') out<<"} // namespace "<<av[1]<<endl;
			
			out.close();
			if(! out) {
				cerr<<"can't write: "<<ac_conf<<": "<<strerror(errno)<<endl;
				return 1;
			}
	} catch( const exception & e ) {
			cerr<<"exception: "<<e.what()<<endl;
			return 1;
	}
	return 0;
}
