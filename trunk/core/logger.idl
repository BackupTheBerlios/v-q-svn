/*
Virtual Qmail (http://v-q.foo-baz.com)
Copyright (C) 2002-2004 Pawel Niewiadomski (new-baz.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include "vq.idl"

module vq {

	/**
	 * Base class for subsystem responsible of storing informations about
	 * users' loggins.
	 */
	interface ilogger {
			typedef ivq::error error;
			typedef ivq::err_code err_code;

			/// Size
			typedef ivq::size_type size_type;
	
			/// what we're logging about
			enum service {
					ser_unknown, //!< unknown connection
					ser_smtp, //!< smpt connection
					ser_pop3, //!< pop3 connection
					ser_http, //!< http connection
					ser_https, //!< https connection
					ser_emtp //!< my emtp protocol
			};
	
			/// status of authorization/login
			enum result {
					re_ok, //!< success
					re_read, //!< can't read data
					re_data, //!< invalid data (domain, username, password)
					re_pass, //!< invalid password, description includes given password
					re_int, //!< internal error
					re_blk //!< user's blocked
			};
	
			/// information stored in log db
			struct log_entry {
					string id_log; //!< entry's id
					string time; //!< time when entry was stored
					service ser; //!< service
					string msg; //!< error message?
					string login; //!< user's id
					string domain; //!< domain
					string ip; //!< client's ip
					result res; //!< login status, i.e.: ok, error, blocked
			};

			typedef sequence< log_entry > log_entry_list;
				
			/// sets client address
			void ip_set( in string ip );
	
			/// set service type
			void service_set( in service ser );
	
			/// set domain
			void domain_set( in string dom );
	
			/// set user
			void login_set( in string log );
					
			/// Write information
			error write( in result r, in string msg );
	
			/**
			 * Read all entries from global log (log table) where domain and
			 * login match.
			 */ 
			error read( in size_type start, in size_type cnt,
					out log_entry_list les );

			/**
			 *
			 */
			error count( out size_type cnt );
	};

}; // module vq
