/*
Virtual Qmail (http://v-q.foo-baz.com)
Copyright (C) 2002-2004 Pawel Niewiadomski (new-baz.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
module vq {
	interface ivq {
			typedef unsigned long quota_type; //!< Type for holding quota values
			typedef unsigned long size_type; //!< Type for holding sizes
			typedef unsigned short aif_type;
			typedef sequence<string> string_list;

		/**
		 * \defgroup exceptions Exceptions used by this class
		 * \ingroup err
		 * @{
		 */
		 	exception runtime_error {
					string what;
					string file;
					unsigned long line;
			};

			/**
			 * you wrote some shit
			 */
			exception logic_error {
					string what;
					string file;
					unsigned long line;
			};

			/**
			 * Argument was NULL but it's not allowed
			 */
			 exception null_error {
			 		string file;
					unsigned long line;
			 };
		/*@}*/

		/**
		 * \ingroup err
		 */
		/*@{*/
			/// errors
			enum error {
					/// no error
					err_no, 
					/// temporary error
					err_temp,
					/// invalid domain name
					err_dom_inv,
					/// invalid user name
					err_user_inv,
					/// user not found
					err_user_nf,
					/// error in authorization module
					err_auth,
					/// dot file - type is not supported
					err_udot_tns,
					/// can't open sth
					err_open,
					/// can't write
					err_wr,
					/// can't read
					err_rd,
					/// can't stat
					err_stat,
					/// not a directory
					err_notdir,
					/// chmod failed
					err_chmod,
					/// file's locked
					err_lckd,
					/// can't rename
					err_ren,
					/// can't change owner
					err_chown,
					/// overflow
					err_over,
					/// child crashed or returned something unexpected
					err_exec,
					/// can't create directory
					err_mkdir,
					/// entry exists
					err_exists,
					/// no such element/entry
					err_noent,
					/// can't remove
					err_unlink,
					/// domain doesn't exist
					err_dom_nf
			};
		/*@}*/
				
			/// possible user account flags
			/// was:
			/// enum auth_info_flags {
			/// blocked pop3 access
			const aif_type aif_pop3_blk = 1;
			/// blocked smtp access
			const aif_type aif_smtp_blk = 2;
			/// admin (it was first added user)
			const aif_type aif_admin = 4;
			/// ftp access blocked
			const aif_type aif_ftp_blk = 8;
			/// ignore me (entry MUST be ignored)
			const aif_type aif_ignore = 16;
			/// super (server) admin
			const aif_type aif_supadm = 32;
			/// };

			/**
			 * structure used in some routines. it includes basic
			 * user's information.
			 */
			struct auth_info {
					string user; //!< user name
					string pass; //!< password
					string dom; //!< domain
					string dir; //!< mailbox directory
					aif_type flags; //!< additional flags
			};

			/// Mailbox options
			enum udot_type {
					ut_redir, //!< redirection
					ut_maildir, //!< maildir
					ut_sms, //!< sms notification
					ut_autoresp //!< autorespond
			};

			/// user's dot file info
			struct udot_info {
					string id; //!< identificator
					string val; //!< value
					udot_type type; //!< type of entry
			};
			typedef sequence<udot_info> udot_info_list;

		/**
		 * \defgroup dom Playing with domains
		 * @{
		 */
			/// Add domain
			error dom_add(in string dom) 
					raises (null_error, runtime_error, logic_error); 

			/**
			 * Add domain's alias address (for example ip address).
			 * Ip addresses should be in form [a.b.c.d], or a.b.c.d (
			 * it's better to add 2 forms).
			 */
			error dom_ip_add(in string dom, in string ip)
					raises (null_error, runtime_error, logic_error);
			/// Removes IP address
			error dom_ip_rm(in string dom, in string ip)
					raises (null_error, runtime_error, logic_error);
			/// Removes all IP addresses
			error dom_ip_rm_all(in string dom)
					raises (null_error, runtime_error, logic_error);
			/// Lists addresses asociated with domain
			error dom_ip_ls(in string dom, out string_list ips)
					raises (null_error, runtime_error, logic_error);
			/// Lists domains which have IP addresses asociated
			error dom_ip_ls_dom(out string_list doms)
					raises (null_error, runtime_error, logic_error);
			/// Removes domain
			error dom_rm(in string dom)
					raises (null_error, runtime_error, logic_error);
			/// Adds alias for domain
			error dom_alias_add(in string dom, in string ali)
					raises (null_error, runtime_error, logic_error);
			/// Removes alias
			error dom_alias_rm(in string ali)
					raises (null_error, runtime_error, logic_error);
			/// Validates domain name
			error dom_val(in string dom)
					raises (null_error, runtime_error, logic_error);
	/*@}*/

	/**
	 * \ingroup err
	 */
	/*@{*/
			/// return additional information about error (i.e. file name)
			string err_info()
					raises (null_error, runtime_error, logic_error);
			long err_sys(); //!< return stored errno

			/// return message associated with given error code
			string err_str( in error err );

			/// return description of error from lastret
			string err_report();
	/*@}*/
			
	/**
	 * \defgroup user User handling
	 * @{
	 */
			/// Adds user
			error user_add(in string dom, in string user, in string pass, 
				in error eex )
					raises (null_error, runtime_error, logic_error);
			/// Removes user
			error user_rm(in string dom, in string user)
					raises (null_error, runtime_error, logic_error);
			/// Changes password
			error user_pass(in string dom, in string user, in string pass)
					raises (null_error, runtime_error, logic_error);
			/// Checks if user name is valid (not if user exists)
			error user_val(in string user)
					raises (null_error, runtime_error, logic_error);
			/// Gets authorization info. for user
			error user_auth(inout auth_info ai)
					raises (null_error, runtime_error, logic_error);
			/// Checks if user exists
			error user_ex(in string dom, in string user)
					raises (null_error, runtime_error, logic_error);
	//@}

	/**
	 * \defgroup qt Quota support
	 * @{
	 */
		/**
		 * \defgroup qt_user Quota support for users
		 * \ingroup qt
		 */
		//@{
			/// Parses string into quota_types
			error qt_parse( in string qts, 
				out quota_type bytes_max, out quota_type files_max )
					raises (null_error, runtime_error, logic_error);
#if 0			
			/// Adds value to current usage
			error qt_cur_set(const string&, 
					in string, int32_t)
					raises (null_error, runtime_error, logic_error);
			/// Checks if over quota
			error qt_over(in string, 
					in string)
					raises (null_error, runtime_error, logic_error);
#endif // if 0
			/// Sets limits
			error qt_set(in string dom, in string user, 
					out quota_type bytes_max, out quota_type files_max )
					raises (null_error, runtime_error, logic_error);
			/// Gets limits
			error qt_get(in string dom, in string user, 
					out quota_type bytes_max, out quota_type files_max )
					raises (null_error, runtime_error, logic_error);

			/// Sets default value for a domain
			error qt_def_set(in string dom, 
					in quota_type bytes_max, in quota_type files_max )
					raises (null_error, runtime_error, logic_error);
			/// Gets default value
			error qt_def_get(in string dom, 
					out quota_type bytes_max, out quota_type files_max )
					raises (null_error, runtime_error, logic_error);

			/// Sets global defaults for new domains
			error qt_global_def_set( 
					in quota_type bytes_max, in quota_type files_max )
					raises (null_error, runtime_error, logic_error);
			/// Gets global defaults for new domains
			error qt_global_def_get(
					out quota_type bytes_max, out quota_type files_max )
					raises (null_error, runtime_error, logic_error);
		//@}
	/*@}*/

	/**
	 * \defgroup udot Playing with user mailbox's options
	 * @{
	 */
			/// Adds to dot file
			error udot_add(in string dom, in string user,
					in string pfix, out udot_info ui )
					raises (null_error, runtime_error, logic_error);
			/// Adds some default configuration to user's mailbox
			error udot_add_md_def(in string dom, in string user,
					in string pfix)
					raises (null_error, runtime_error, logic_error);
			/// Removes all options of specified type
			error udot_rm_by_type(in string dom, in string user,
					in udot_type ut )
					raises (null_error, runtime_error, logic_error);
			/// Removes option with given id
			error udot_rm_by_id(in string dom, in string user, 
					in string id)
					raises (null_error, runtime_error, logic_error);
			/// Lists mailbox configuration
			error udot_ls(in string dom, in string user, in string pfix, 
					out udot_info_list uis )
					raises (null_error, runtime_error, logic_error);
			/// Lists mailbox options of specified type
			error udot_ls_by_type(in string dom, in string user,
					in string pfix, in udot_type ut, 
					out udot_info_list uis )
					raises (null_error, runtime_error, logic_error);
			/// Changes value of option with given id.
			error udot_rep(in string dom, in string user,
					in udot_info ui )
					raises (null_error, runtime_error, logic_error);
			/// Gets value of options with given id.
			error udot_get( in string dom, in string user,
					inout udot_info ui )
					raises (null_error, runtime_error, logic_error);
			/// Checks if given option is supported
			error udot_sup_is( in udot_type ut )
					raises (null_error, runtime_error, logic_error);
			/// Checks if mailbox has configured option of given type
			error udot_has(in string dom, in string user, in string pfix, 
					in udot_type ut )
					raises (null_error, runtime_error, logic_error);
			/// Counts options with given type
			error udot_type_cnt(in string dom, in string user, in string pfix, 
					in udot_type ut, out size_type cnt )
					raises (null_error, runtime_error, logic_error);
		//@}
	}; // interface ivq

}; // module vq
