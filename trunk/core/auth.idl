/*
Virtual Qmail (http://v-q.foo-baz.com)
Copyright (C) 2002-2004 Pawel Niewiadomski (new-baz.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/

#include "vq.idl"

module vq {
	/**
	 * Base class representing authorization module.
	 */
	interface iauth {
			/// Type used for size specifications, the same as in cvq
			typedef ivq::size_type size_type;
			typedef ivq::quota_type quota_type;
			typedef ivq::string_list string_list;
			typedef ivq::auth_info auth_info;
			typedef ivq::udot_info udot_info;
			typedef ivq::udot_info_list udot_info_list;
			typedef ivq::udot_type udot_type;
			typedef ivq::aif_type aif_type;

			enum error {
				err_no, //!< no errors
				err_func_res, //!< incorrect return from function
				err_user_inv, //!< invalid user name
				err_db, //!< database error
				err_exists,
				err_noent //!< no such element
			};

		/**
		 * \defgroup dom Domains manipulation
		 */
		//@{
			/// Adds domain to database
			error dom_add(in string dom, out string dom_id)
					raises (null_error, db_error, except);
			/*
			/// Adds domain's IP address
			error dom_ip_add(in string dom, in string ip)
					raises (null_error);
			/// Remove IP for domain
			error dom_ip_rm(in string dom, in string ip)
					raises (null_error);
			/// Removes all IP addresses asociated with domain
			error dom_ip_rm_all(in string dom)
					raises (null_error);
			/// Lists all IP addresses asociated with domain
			error dom_ip_ls(in string dom, out string_list ips)
					raises (null_error);
			/// Lists domains having IP addresses
			error dom_ip_ls_dom(out string_list doms)
					raises (null_error);
			*/
			/// Removes domain.
			error dom_rm(in string dom_id)
					raises (null_error, db_error, except);
			/// Translates domain name to id.
			error dom_id(in string dom, out string dom_id)
					raises (null_error, db_error, except);
		//@}
		
		/**
		 * \defgroup user Users manipulation
		 */
		//@{
			/// Adds user
			error user_add(inout auth_info ai, in boolean is_banned )
					raises (null_error, db_error, except);
			/// Removes user
			error user_rm(in string dom_id, in string user_id)
					raises (null_error, db_error, except);
			/// Changes password for user
			error user_pass(in string dom_id, in string user_id, in string pass )
					raises (null_error, db_error, except);
			/*
			/// Gets authorization information for user
			error user_auth( inout auth_info ai )
					raises (null_error, db_error, except);
			/// Checks whether user exists
			error user_ex(in string dom, in string user)
					raises (null_error, db_error, except);
			*/
			/// Translates user name to id
			error user_id(in string dom_id, in string login, 
					out string user_id )
					raises (null_error, db_error, except);
		//@}
#if 0
		/**
		 * \ingroup qt_user
		 */
		//@{
			/// Gets limits for user
			error qt_get(in string dom, in string user, 
					out quota_type bytes_max , out quota_type files_max )
					raises (null_error, db_error, except);
			/// Sets limits for user
			error qt_set(in string dom, in string user, 
					in quota_type bytes_max, in quota_type files_max )
					raises (null_error, db_error, except);

			/// Sets default value for a domain
			error qt_def_set(in string dom, 
					in quota_type bytes_max, in quota_type files_max )
					raises (null_error, db_error, except);
			/// Gets default value
			error qt_def_get(in string dom, 
					out quota_type bytes_max, out quota_type files_max )
					raises (null_error, db_error, except);
			
			/// Sets global defaults for new domains
			error qt_global_def_set( 
					in quota_type bytes_max, in quota_type files_max )
					raises (except);
			/// Gets global defaults for new domains
			error qt_global_def_get(
					out quota_type bytes_max, out quota_type files_max )
					raises (except);
		//@}

		/**
		 * \defgroup udot Mailboxes configuration
		 */
		//@{
			/// Adds mailbox configuration
			error udot_add(in string dom, in string user,
					in string pfix, out udot_info ui )
					raises (null_error, db_error, except);
			/// Removes all mailbox configuration entries
			error udot_rm_by_type(in string dom, in string user,
					in udot_type ut )
					raises (null_error, db_error, except);
			/// Removes mailbox configuration entry
			error udot_rm_by_id(in string dom, in string user,
					in string id )
					raises (null_error, db_error, except);
			/// Lists mailbox configuration
			error udot_ls(in string dom, in string user,
					in string pfix, out udot_info_list uis )
					raises (null_error, db_error, except);
			/// Lists mailbox configuation of specified type
			error udot_ls_by_type(in string dom, in string user,
					in string pfix, in udot_type ut,
					out udot_info_list uis )
					raises (null_error, db_error, except);
			/// Changes existing entry
			error udot_rep(in string dom, in string user,  
					in udot_info ui )
					raises (null_error, db_error, except);
			/// Gets existing entry
			error udot_get(in string dom, in string user,
					inout udot_info ui )
					raises (null_error, db_error, except);
			/// Checks whether mailbox has entry of specified type
			error udot_has(in string dom, in string user,
					in string pfix, in udot_type ut )
					raises (null_error, db_error, except);
			/// Counts entries of specified type
			error udot_type_cnt(in string dom, in string user,
					in string pfix, in udot_type ut, 
					out size_type cnt )
					raises (null_error, db_error, except);
		//@}
		
		/**
		 * \ingroup err
		 */
		/*@{*/
			/// return additional information about error (i.e. file name)
			string err_info() 
					raises(except);
			long err_sys()
					raises(except); //!< Returns stored errno

			/// return description of error from lastret
			string err_report()
					raises(except);
		/*@}*/
#endif // if 0
	}; // interface iauth

}; // module vq

