#!/usr/bin/perl

package vqpgsql;

use Pg;

# Configuration

my $con_conf = "dbname=mail user=mail host=/tmp";
my $schema = "mail";

# Prototypes
sub schema_crt;
sub schema_set;
sub qdie($);
sub version_get;
sub plpgsql;

# functions upgrading to version 6
sub v6_vq_info;
sub v6_domains;
sub v6_funcs;
sub v6_tables;

############
my $con = Pg::connectdb($con_conf);
if( $con->status != PGRES_CONNECTION_OK ) {
	die("Can't connect: ".$con->errorMessage);
}

if($schema ne "") {
	schema_crt();
	schema_set();
}

plpgsql();

my $ver = version_get();

print "Database version is: $ver\n";
if( $ver < 6 ) {
	print "Upgrading to 6...\n";
	v6_vq_info();
	v6_tables();
	v6_funcs();
}

# Functions

##
#
sub schema_crt {
	my $qr = "SELECT '1' FROM pg_catalog.pg_namespace WHERE nspname='$schema'";
	my $res = $con->exec($qr);
	if( $res->resultStatus != PGRES_TUPLES_OK ) {
		qdie($qr);
	}
	if( $res->ntuples == 1 && $res->getvalue(0,0) eq "1" ) {
		return;
	}
	$qr = "CREATE SCHEMA $schema";
	$res = $con->exec($qr);
	if( $res->resultStatus != PGRES_COMMAND_OK ) {
		qdie($qr);
	}
}

##
#
sub schema_set {
	my $qr = "SET search_path=$schema";
	my $res = $con->exec($qr);
	if( $res->resultStatus != PGRES_COMMAND_OK ) {
		qdie($qr);
	}
}

##
#
sub qdie($) {
	die("Query: $_[0]: ".$con->errorMessage);
}

##
# Get v-q schema version
sub version_get {
	my $qr = "SELECT '1' FROM pg_tables WHERE schemaname='"
		.($schema eq "" ? "public" : $schema)."' AND tablename='vq_info'";
	my $res = $con->exec($qr);
	if( $res->resultStatus != PGRES_TUPLES_OK ) {
		qdie($qr);
	}
	if( $res->ntuples == 1 && $res->getvalue(0,0) eq "1" ) {
		$qr = "SELECT value FROM vq_info WHERE key='version'";
		$res = $con->exec($qr);
		if( $res->resultStatus != PGRES_TUPLES_OK ) {
			qdie($qr);
		}
		return $res->ntuples >= 1 ? int($res->getvalue(0,0)) : 0;
	} else {
		return 0;
	}
}

##
# Create table with informations about database
sub v6_vq_info {
	my $qr = "CREATE TABLE vq_info "
		."(key TEXT NOT NULL CHECK (length(key)>1), value TEXT NOT NULL,".
		"PRIMARY KEY(key))";
	my $res = $con->exec($qr);
	if( $res->resultStatus != PGRES_COMMAND_OK ) {
		qdie($qr);
	}
	$qr = "INSERT INTO vq_info (key,value) VALUES('version','6')";
	$res = $con->exec($qr);
	if( $res->resultStatus != PGRES_COMMAND_OK || $res->cmdTuples != 1 ) {
		qdie($qr);
	}
}

##
#
sub plpgsql {
	my $qr = "SELECT '1' FROM pg_catalog.pg_language WHERE lanname='plpgsql'";
	my $res = $con->exec($qr);
	if( $res->resultStatus != PGRES_TUPLES_OK ) {
		qdie($qr);
	}
	if( $res->ntuples == 1 && $res->getvalue(0,0) eq "1" ) {
		return;
	}
	die("You must manually enable PL/PgSQL for selected database.\n");
}

##
#
sub v6_tables {
	my @funcs = (
"CREATE TABLE vq_domains (id_domain serial,"
."domain text unique not null check(length(domain)>1),"
."qt_user_bytes_def int not null default 0,"
."qt_user_files_def int not null default 0,"
."PRIMARY KEY(id_domain))",

"CREATE TABLE vq_emails_banned (re_domain text not null,"
."re_login text not null,"
."PRIMARY KEY(re_domain, re_login))",

"CREATE TABLE vq_users (".
"id_domain int not null references vq_domains (id_domain) ON UPDATE CASCADE"
	." ON DELETE CASCADE,"
."login text not null check(login<>''),"
."pass text not null,"
."flags int not null default 0 check(flags>=0),
qt_bytes_max int not null default 0 check(qt_bytes_max>=0),
qt_files_max int not null default 0 check(qt_files_max>=0),"
."PRIMARY KEY(id_domain, login))",

"CREATE TABLE vq_domains_re_aliases (
id_domain int not null references vq_domains (id_domain),
re_alias text not null,
PRIMARY KEY(id_domain,re_alias))",

"CREATE INDEX vq_domains_re_aliases_id_domain_idx 
ON vq_domains_re_aliases (id_domain)"
); # funcs

	for( my $i=0; $i < @funcs.""; ++$i ) {
		my $res = $con->exec($funcs[$i]);
		if( $res->resultStatus != PGRES_COMMAND_OK ) {
			qdie($funcs[$i]);
		}
	}
} # v6_tables

##
#
sub v6_funcs {
	my @funcs = (
"CREATE FUNCTION dom_add(vq_domains.domain\%TYPE) RETURNS vq_domains.id_domain\%TYPE AS '
DECLARE
    _domain ALIAS FOR \$1;
	id RECORD;
	exists RECORD;
BEGIN
	SELECT ''1'' INTO exists FROM vq_domains WHERE domain=_domain;
	IF FOUND THEN	
		RETURN -1;
	END IF;

	SELECT NEXTVAL(''vq_domains_id_domain_seq'') INTO id;
	
	INSERT INTO vq_domains (id_domain,domain) VALUES(id.nextval, _domain);
	NOTIFY dom_add;
	RETURN id.nextval;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION dom_id(vq_domains.domain\%TYPE) RETURNS vq_domains.id_domain\%TYPE AS '
DECLARE
    _domain alias for \$1;
	id RECORD;
BEGIN
	SELECT id_domain INTO id FROM vq_domains WHERE domain=_domain LIMIT 1;
	IF NOT FOUND THEN
		RETURN -1;
	END IF;
	RETURN id.id_domain;
END;
' LANGUAGE 'plpgsql';",

"CREATE or replace FUNCTION dom_name (vq_domains.id_domain\%TYPE) RETURNS vq_domains.domain\%TYPE AS '
DECLARE
    dom_id alias for \$1;
	name RECORD;
BEGIN
	SELECT domain INTO name FROM vq_domains WHERE id_domain=dom_id LIMIT 1;
	IF NOT FOUND THEN
		RETURN -1;
	END IF;
	RETURN name.domain;
END;
' LANGUAGE 'plpgsql';",

"CREATE or replace FUNCTION dom_rm (vq_domains.id_domain\%TYPE) RETURNS VOID AS '
DECLARE
    _id_domain alias for \$1;
BEGIN
	DELETE FROM vq_domains WHERE id_domain = _id_domain;
	NOTIFY dom_rm;
	RETURN;
END;
' LANGUAGE 'plpgsql';", 

"CREATE FUNCTION vq_domains_qt_user_trig() RETURNS TRIGGER AS '
DECLARE
	qt RECORD;
BEGIN
	SELECT INTO qt qt_user_files_def,qt_user_bytes_def FROM vq_domains 
		WHERE domain=''global'';

	IF FOUND THEN
		IF NEW.qt_user_files_def = 0 THEN
			NEW.qt_user_files_def := qt.qt_user_files_def;
		END IF;

		IF NEW.qt_user_bytes_def = 0 THEN
			NEW.qt_user_bytes_def := qt.qt_user_bytes_def;
		END IF;
	END IF;
	RETURN NEW;
END;
' LANGUAGE 'plpgsql';",

"CREATE TRIGGER vq_domains_qt_user_trig BEFORE INSERT ON vq_domains 
FOR EACH ROW EXECUTE PROCEDURE vq_domains_qt_user_trig ();",

"CREATE FUNCTION dra_add
(vq_domains.id_domain\%TYPE, vq_domains_re_aliases.re_alias\%TYPE) 
RETURNS INT4 AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	_re_alias ALIAS FOR \$2;
	exists RECORD;
BEGIN
	SELECT ''1'' INTO exists FROM vq_domains_re_aliases
		WHERE id_domain=_id_domain AND re_alias=_re_alias;
	IF FOUND THEN	
		RETURN -1;
	END IF;

	INSERT INTO vq_domains_re_aliases (id_domain,re_alias) 
		VALUES(_id_domain, _re_alias);
	NOTIFY dra_add;
	RETURN 0;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION dra_ls_by_dom (vq_domains_re_aliases.id_domain\%TYPE) 
RETURNS SETOF TEXT AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	rea RECORD;
BEGIN
	FOR rea IN SELECT re_alias FROM vq_domains_re_aliases WHERE id_domain=_id_domain LOOP
		RETURN NEXT rea.re_alias;
	END LOOP;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION dra_rm
(vq_domains_re_aliases.id_domain\%TYPE, vq_domains_re_aliases.re_alias\%TYPE) 
RETURNS VOID AS '
DECLARE
    _id_domain alias for \$1;
    _re_alias alias for \$2;
BEGIN
	DELETE FROM vq_domains_re_aliases WHERE id_domain = _id_domain 
		AND re_alias=_re_alias;
	NOTIFY dra_rm;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION dra_rm_by_dom(vq_domains_re_aliases.id_domain\%TYPE) 
RETURNS VOID AS '
DECLARE
    _id_domain alias for \$1;
BEGIN
	DELETE FROM vq_domains_re_aliases WHERE id_domain = _id_domain;
	NOTIFY dra_rm_by_dom;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE OR REPLACE FUNCTION eb_add 
(vq_emails_banned.re_domain\%TYPE, vq_emails_banned.re_login\%TYPE) RETURNS INT4 AS '
DECLARE
	_re_domain ALIAS FOR \$1;
	_re_login ALIAS FOR \$2;
	exists RECORD;
BEGIN
	SELECT ''1'' INTO exists FROM vq_emails_banned
		WHERE re_domain=_re_domain AND re_login=_re_login;
	IF FOUND THEN	
		RETURN -1;
	END IF;

	INSERT INTO vq_emails_banned (re_domain,re_login) VALUES(_re_domain, _re_login);
	NOTIFY eb_add;
	RETURN 0;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION eb_ls () RETURNS SETOF vq_emails_banned AS '
DECLARE
	ban RECORD;
BEGIN
	FOR ban IN SELECT * FROM vq_emails_banned LOOP
		RETURN NEXT ban;
	END LOOP;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION eb_rm 
(vq_emails_banned.re_domain\%TYPE, vq_emails_banned.re_login\%TYPE) 
RETURNS VOID AS '
DECLARE
    _re_domain alias for \$1;
    _re_login alias for \$2;
BEGIN
	DELETE FROM vq_emails_banned WHERE re_domain = _re_domain AND re_login=_re_login;
	NOTIFY eb_rm;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION QT_USER_DEF_GET(vq_domains.id_domain\%TYPE) RETURNS RECORD AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	qt RECORD;
BEGIN
	SELECT INTO qt qt_user_bytes_def,qt_user_files_def FROM vq_domains 
		WHERE id_domain=_id_domain LIMIT 1;
	IF NOT FOUND THEN
		SELECT INTO qt null::int,null::int;
	END IF;
	RETURN qt;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION qt_user_def_set
(vq_domains.id_domain\%TYPE, 
vq_domains.qt_user_bytes_def\%TYPE,
vq_domains.qt_user_files_def\%TYPE) RETURNS VOID AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	bytes_max ALIAS FOR \$2;
	files_max ALIAS FOR \$3;
BEGIN
	UPDATE vq_domains SET qt_user_bytes_def=bytes_max,qt_user_files_def=files_max
		WHERE id_domain=_id_domain;
	NOTIFY qt_user_def_set;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION qt_user_get
(vq_users.id_domain\%TYPE, vq_users.login\%TYPE) RETURNS RECORD AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	_login ALIAS FOR \$2;
	qt RECORD;
BEGIN
	SELECT INTO qt qt_bytes_max,qt_files_max FROM vq_users
		WHERE id_domain=_id_domain AND login=_login LIMIT 1;
	IF NOT FOUND THEN
		SELECT INTO qt null::int,null::int; 
	END IF;
	RETURN qt;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION qt_user_set
(vq_users.id_domain\%TYPE, vq_users.login\%TYPE,
vq_users.qt_bytes_max\%TYPE, vq_users.qt_files_max\%TYPE) RETURNS VOID AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	_login ALIAS FOR \$2;
	bytes_max ALIAS FOR \$3;
	files_max ALIAS FOR \$4;
BEGIN
	UPDATE vq_users SET qt_bytes_max=bytes_max,qt_files_max=files_max
		WHERE id_domain=_id_domain AND login=_login;
	NOTIFY qt_user_set;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

#CREATE or replace FUNCTION mail.udot_add(text,text,text,char,text) RETURNS int4 AS '
#DECLARE
#    dom alias for $1;
#    user alias for $2;
#    ext alias for $3;
#    tp alias for $4;
#    val alias for $5;
#    nv RECORD;
#BEGIN
#    FOR nv IN EXECUTE ''SELECT nextval('' || quote_literal(dom 
#                || ''_dot_id_seq'') || '')'' LOOP
#            
#            EXECUTE ''INSERT INTO '' || quote_ident(dom || ''_dot'') 
#                || '' (ID,TYPE,VALUE,EXT,UID) VALUES(''
#                || quote_literal(nv.nextval) || '',''
#                || quote_literal(tp) || '',''
#                || quote_literal(val) || '',''
#                || quote_literal(user || ''-'' || ext) 
#                || '',(SELECT id FROM ''|| quote_ident(dom) 
#                ||'' WHERE login='' || quote_literal(user) || '' LIMIT 1))'';
#
#            RETURN nv.nextval;
#    END LOOP;
#    RAISE EXCEPTION ''????'';
#END;
#' LANGUAGE 'plpgsql';

"CREATE or replace FUNCTION user_add
(vq_users.id_domain\%TYPE,
vq_users.login\%TYPE,
vq_users.pass\%TYPE,
vq_users.flags\%TYPE,
bool) RETURNS int4 AS '
DECLARE
    _id_domain alias for \$1;
    _login alias for \$2;
    _pass alias for \$3;
    _flags alias for \$4;
	is_banned alias for \$5;

	domain RECORD;
	exists RECORD;
    ban RECORD;
BEGIN
    IF is_banned = ''t''::boolean THEN
      FOR ban IN SELECT 1 FROM vq_emails_banned WHERE 
	  		(SELECT domain FROM vq_domains WHERE id_domain=_id_domain) ~* re_domain
			AND _login ~* re_login LOOP
        RETURN -2;
      END LOOP;
    END IF;

	FOR exists IN SELECT 1 FROM vq_users 
			WHERE id_domain=_id_domain AND login=_login LOOP
		RETURN -1;
	END LOOP;
	
    INSERT INTO vq_users (id_domain,login,pass,flags) 
		VALUES(_id_domain,_login,_pass,_flags);

	NOTIFY user_add;
	RETURN 0;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION user_auth
(vq_users.id_domain\%TYPE,
vq_users.login\%TYPE,
vq_users.pass\%TYPE) RETURNS vq_users.flags\%TYPE AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	_login ALIAS FOR \$2;
	_pass ALIAS FOR \$3;
	ai RECORD;
BEGIN
	SELECT INTO ai pass,flags FROM vq_users 
		WHERE id_domain=_id_domain AND login=_login LIMIT 1;
	IF NOT FOUND THEN
		RETURN -1;
	END IF;
	IF ai.pass != _pass THEN
		RETURN -2;
	END IF;
	RETURN ai.flags;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION user_ex
(vq_users.id_domain\%TYPE,
vq_users.login\%TYPE) RETURNS int AS '
DECLARE
	_id_domain ALIAS FOR \$1;
	_login ALIAS FOR \$2;
	ai RECORD;
BEGIN
	SELECT INTO ai ''1'' FROM vq_users 
		WHERE id_domain=_id_domain AND login=_login LIMIT 1;
	IF NOT FOUND THEN
		RETURN 1;
	END IF;
	RETURN 0; 
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION user_pass
(vq_users.id_domain\%TYPE, vq_users.login\%TYPE, vq_users.pass\%TYPE) 
RETURNS INT AS '
DECLARE
    _id_domain alias for \$1;
    _login alias for \$2;
    _pass alias for \$3;
	rows int;
BEGIN
	UPDATE vq_users SET pass=_pass WHERE id_domain=_id_domain AND login=_login;
	GET DIAGNOSTICS rows = ROW_COUNT;
	NOTIFY user_pass;
	IF rows = 1 THEN
		RETURN 0;
	END IF;
	RETURN -1;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION user_rm
(vq_users.id_domain\%TYPE, vq_users.login\%TYPE) RETURNS VOID AS '
DECLARE
    _id_domain alias for \$1;
    _login alias for \$2;
BEGIN
	DELETE FROM vq_users WHERE id_domain=_id_domain AND login=_login;
	NOTIFY user_rm;
	RETURN;
END;
' LANGUAGE 'plpgsql';",

"CREATE FUNCTION vq_users_qt_user_trig () RETURNS TRIGGER AS '
BEGIN
	IF NEW.qt_files_max = 0 THEN
		NEW.qt_files_max := (SELECT qt_user_files_def FROM vq_domains WHERE id_domain=NEW.id_domain);
	END IF;

	IF NEW.qt_bytes_max = 0 THEN
		NEW.qt_bytes_max := (SELECT qt_user_bytes_def FROM vq_domains WHERE id_domain=NEW.id_domain);
	END IF;

	RETURN NEW;
END;
' LANGUAGE 'plpgsql';",

"CREATE TRIGGER vq_users_qt_user_trig BEFORE INSERT ON vq_users 
FOR EACH ROW EXECUTE PROCEDURE vq_USERS_QT_USER_TRIG ();"
);

	for( my $i=0; $i < @funcs.""; ++$i ) {
		my $res = $con->exec($funcs[$i]);
		if( $res->resultStatus != PGRES_COMMAND_OK ) {
			qdie($funcs[$i]);
		}
	}
} # v6_funcs

