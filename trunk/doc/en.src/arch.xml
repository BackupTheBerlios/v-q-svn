<chapter id="arch">
	<title>Architecture</title>

	<para>
		This chapter describes different parts of v-q system.
	</para>

	<section id="arch.parts">
		<title>Main parts</title>

		<para>
			V-q is a modularized system. Each of subsystems is a separate
			interface accessed via CORBA protocol. This means that you
			can replace any part at any time. It's matter of configuration.
		</para>

		<figure>
			<title>Architecture in a picture</title>
			<graphic fileref="arch.en.png" format="PNG"/>
		</figure>

		<para>
			In following sections each part is described.
		</para>
	</section>

	<section id="arch.ivq">
		<title>Interface ivq</title>

		<para>
			This is the most important interface. It is used directly
			by client programs. It is the core of the system. This module
			is responsible for integration with a mail transfer agent.
			Usually this module creates and maintains data structures on
			disk, MTA's configurations, etc.
		</para>

		<para>
			It represents all functions system offers. Client applications
			connect to it using CORBA protocol and call its methods.
		</para>

		<para>
			Ivq module calls methods from <link linkend="arch.iauth">iauth</link>
			interface to retrieve or store informations about users or domains.
		</para>

		<section id="arch.ivq.cqmailvq">
			<title>cqmailvq</title>
			
			<para>
				At this time there's only one implementation of 
				<link linkend="arch.ivq">ivq</link> represented
				by cqmailvq class, and by qmailvqd daemon.
			</para>

			<para>
				This object integrates with 
				<ulink url="http://www.qmail.org">qmail</ulink> MTA. It
				handles updating qmail's configuration, managing
				users' maildirs, directories hierarchy, etc.
			</para>

			<para>
				For some actions it uses small, helper programs
				that are responsible for qmail's configuration updates.
				This way privileges can be separated - qmail's configuration
				can be owned by a user other than the user which runs
				qmailvqd.
			</para>
		</section>
	</section>

	<section id="arch.iauth">
		<title>Interface iauth</title>

		<para>
			This interface represents authorization back end which
			is responsible for storing informations about existing
			domains and users.
		</para>

		<para>
			Usually this interface implementations does not create
			any entries in a file system. They operate only on a specified
			database.
		</para>

		<para>
			This interface is used by <link linkend="arch.ivq">ivq
			implementations</link>. You should not use it directly.
			If you think that some feature should be added
			to ivq please contact developers or add them and send us
			a patch.
		</para>

		<section id="arch.iauth.cpgsqlauth">
			<title>cpgsqlauth</title>

			<para>
				This is an implementation of <link linkend="arch.iauth">iauth
				interface</link>. It operates on a PostgreSQL database.
			</para>

			<para>
				It stores all informations in a database. Doesn't create
				or use any files other than configuration.
			</para>

			<para>
				It is represented by pgsqlauthd daemon.
			</para>
		</section>
	</section>

	<section id="arch.clients">
		<title>Clients: command line programs, WWW interface, etc.</title>

		<para>
			V-q doesn't offer any client library, there's no such need.
			All operations are represented by <link linkend="arch.ivq">ivq</link>
			interface.
		</para>

		<para>
			This means that you can use system from any language that
			has an IDL mapping. At this time almost all popular
			languages has it, i.e.: C, C++, Java, Smalltalk, PHP, python,
			PERL.
		</para>

		<para>
			This has also another advantage - clients doesn't have
			to run with privileges of ivq or iauth. They can
			be run by any user (depends on configuration).
		</para>
	</section>

	<section id="arch.db">
		<title>Database</title>
		
		<para>
			This section describes generic database architecture.
			Some databases may have different structure, check their
			documentation.
		</para>

		<figure>
			<title>Database in a picture</title>
			<graphic fileref="arch.db.png" format="PNG"/>
		</figure>

		<formalpara>
			<title>vq_domains</title>

			<para>
			This is a table that keeps informations about registered
			domains. At this time it includes only domains default
			quota values for users. There's special domains called
			&quot;global&quot; it is used to keep information that
			are copied to newly created domains.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_domains_aliases</title>

			<para>
			This table has informations about aliases for registered
			domains. Alias can be another name, or an IP address.
			Anything what you want. This table is used when
			trying to guess domain's real name.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_domains_ips</title>

			<para>	
			Includes IP address associated with domain, only
			one IP address for a domain is allowed.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_users</title>

			<para>
			Every user registered in v-q system has an entry in this
			table. All users for all domains are stored in one table.
			Dropped stupid design from previous version where
			every domain has it's own table - it was not possible
			to create simple, global relations.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_users_conf</title>

			<para>
			Mailbox configuration. Here a stored informations
			about redirections, automatic responses and whatever you
			version supports.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_emails_banned</title>

			<para>
			Table keeps list of domains and logins that are not
			allowed to be registered.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_info</title>

			<para>
			Informations about database schema, at this time
			only one is supported - schema version.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_log</title>

			<para>
			This table is used to store logs about events in
			system. It's used for example by <application>user_auth</application>.
			It includes only informations about users logins. Other
			events are stored elsewhere.
			</para>
		</formalpara>

		<formalpara>
			<title>vq_view_*</title>

			<para>
			Views that are used to retrieve informations from
			the database without the need to write queries in
			code. Thanks to this you can change database organization
			and all you need is to update views. No need to compile program again.
			</para>
		</formalpara>
	</section>

</chapter>
