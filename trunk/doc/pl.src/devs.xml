<?xml version="1.0" encoding="iso-8859-2"?>
<chapter id="devs">
	<title>Tworzenie aplikacji wykorzystuj±cych v-q</title>

	<para>
		Na dzieñ dzisiejszy nie wiele tu jest. Ten rozdzia³ bêdzie
		rozszerzony w przysz³ej wersji.
	</para>

	<para>
		Aktualnie najobszerniejszym ¼ród³em informacji oraz przyk³adów
		s± same ¼ród³a v-q. Warto obejrzeæ pliki w
		<filename>interfaces/clue</filename>,
		<filename>tests</filename>.
	</para>

	<section id="devs.python">
		<title>U¿ywanie v-q z poziomu pythona</title>
		<para>
			<ulink url="http://www.python.org">Python</ulink> jest jêzykiem,
			który ostatnio zyskuje na popularno¶ci dlatego my¶lê, ¿e warto
			napisaæ kilka s³ów na temat ³±czenia go z v-q.
		</para>

		<para>
			Aby móc rozpocz±æ tworzenie aplikacji wykorzystuj±cych
			v-q z pythona nale¿y zainstalowaæ translator IDL-a dla
			tego jêzyka. Ja u¿y³em
			<ulink url="http://www.omniorb.org">omniORB 4.0.5</ulink>
			oraz rozszerzenie omniORBpy 2.5. Instalacja jest ³atwa.
		</para>

		<para>
			Po zainstalowaniu czas wygenerowaæ pliki dla pythona. Wykonaj
			polecenie:
<synopsis>omniidl -b python vq.idl</synopsis>
			Wygenerowanych zostanie kilka plików i katalogów:
<screen><computeroutput>
./vq_idl.py
./vq/__init__.py
./vq__POA
./vq__POA/__init__.py
</computeroutput></screen>
		</para>

		<para>
			Podczas tworzenia przyk³adu zauwa¿y³em, ¿e
			<filename>vq_idl.py</filename> zawiera b³êdy
			- musisz zamieniæ &quot;_d__except&quot; na
			&quot;_d_except&quot;. Je¿eli tego nie zrobisz nie bêdziesz
			móg³ u¿ywaæ wygenerowanych plików. Je¿eli masz jakie¶
			inne problemy skontaktuj siê z nami.
		</para>

		<para>
			Oto przyk³ad, który utworzy³em. Wywo³uje on funkcjê
			vq::ivq::dom_val w celu sprawdzenia poprawno¶ci nazwy 
			domeny:
<!--INSERT:../../examples/python/dom_val.py-->
<programlisting><![CDATA[
#!/usr/bin/env python
import sys
from omniORB import CORBA
import CosNaming
import vq

orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)

obj = orb.resolve_initial_references("NameService")
rootCtx = obj._narrow(CosNaming.NamingContext)

if rootCtx is None:
	print "Failed to narrow the root naming context"
	sys.exit(1)

name = [ CosNaming.NameComponent("vq::ivq", "") ]

try:
	obj = rootCtx.resolve(name)

except CosNaming.NamingContext.NotFound, ex:
	print "Name not found"
	sys.exit(1)

vqo = obj._narrow(vq.ivq)

if vqo is None:
	print "Object reference is not an vq::ivq"
	sys.exit(1)

dom = "123123.asd.com.pl"
err = vqo.dom_val(dom)

if err.ec is vq.ivq.err_no:
	print "It's a valid domain name"
else:
	print "It's an invalid domain name"

]]></programlisting>
			Poni¿szy skrypt uruchamia omniNames (serwer nazw),
			iauth (pgsqlauthd) oraz ivq (qmailvqd), po czym dom_val.py 
			(powy¿szy przyk³ad). Skrypt mo¿na równie¿ znale¼æ w
			<filename>examples/python</filename>.
<!--INSERT:../../examples/python/run-->
<programlisting><![CDATA[
#!/bin/sh
export BASE=../..
export VQ_HOME=.

export LD_LIBRARY_PATH="/tmp" 
cp -f $BASE/lib*/*.so* /tmp

host=localhost

echo "starting Naming Service daemon ..."
rm -f /tmp/omninames-*
omniNames -start 12456 -logdir /tmp &
nsd_pid=$!

trap "kill $nsd_pid" 0
sleep 2

echo "starting iauth(pgsqlauthd) server ..."
$BASE/base/pgsql/pgsqlauthd \
-ORBIIOPAddr inet:$host:44444 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
iauth_pid=$!
trap "kill $nsd_pid $iauth_pid" 0
sleep 2

echo -ORBInitRef NameService=corbaloc::$host:12453/NameService > etc/ivq/auth
echo "starting ivq(qmailvqd) server ..."
$BASE/base/qmailvqd/qmailvqd \
-ORBIIOPAddr inet:$host:33333 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
ivq_pid=$!

trap "kill $nsd_pid $iauth_pid $ivq_pid" 0
sleep 2

echo "running client ..."
./dom_val.py -ORBInitRef NameService=corbaloc::$host:12456/NameService

]]></programlisting>
			<note>
				<para>
					qmailvqd i pgsqlauthd skompilowa³em u¿ywaj±c MICO, a nie
					omniORB, wiêc jest to równie¿ przyk³ad wspó³dzia³ania
					ró¿nych implementacji CORBA :-)
				</para>
			</note>
		</para>
	</section>
</chapter>
