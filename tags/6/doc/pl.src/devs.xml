<?xml version="1.0" encoding="iso-8859-2"?>
<chapter id="devs">
	<title>Tworzenie aplikacji korzystaj±cych z v-q</title>

	<para>
		Zbyt du¿o tutaj nie ma. Rozdzia³ ten bêdzie rozwiniêty w przysz³ej
		wersji.
	</para>

	<para>
		Na dzieñ dzisiejszy g³ównym ¼ród³em informacji s± ¼ród³a v-q.
		Mo¿esz równie¿ sprawdziæ nastêpuj±ce katalogi:
		<filename>interfaces/clue</filename>,
		<filename>tests</filename>. Dostêpne s± równie¿
		przyk³ady demonstruj±ce w jaki sposób korzystaæ z
		v-q za pomoc± jêzyka innego ni¿ C++, s± one w katalogu
		<filename>examples</filename>.
	</para>

	<section id="devs.python">
		<title>U¿ywanie v-q z poziomu pythona</title>
		<para>
			<ulink url="http://www.python.org">Python</ulink> jest jêzykiem,
			który ostatnio zyskuje na popularno¶ci dlatego my¶lê, ¿e warto
			napisaæ kilka s³ów na temat ³±czenia go z v-q.
		</para>

		<para>
			Aby móc rozpocz±æ tworzenie aplikacji wykorzystuj±cych
			v-q z pythona nale¿y zainstalowaæ translator IDL-a dla
			tego jêzyka. Ja u¿y³em
			<ulink url="http://www.omniorb.org">omniORB 4.0.5</ulink>
			oraz rozszerzenie omniORBpy 2.5. Instalacja jest ³atwa.
		</para>

		<para>
			Po zainstalowaniu czas wygenerowaæ pliki dla pythona. Wykonaj
			polecenie:
<synopsis>omniidl -b python vq.idl</synopsis>
			Wygenerowanych zostanie kilka plików i katalogów:
<screen><computeroutput>
./vq_idl.py
./vq/__init__.py
./vq__POA
./vq__POA/__init__.py
</computeroutput></screen>
		</para>

		<para>
			Podczas tworzenia przyk³adu zauwa¿y³em, ¿e
			<filename>vq_idl.py</filename> zawiera b³êdy
			- musisz zamieniæ &quot;_d__except&quot; na
			&quot;_d_except&quot;. Je¿eli tego nie zrobisz nie bêdziesz
			móg³ u¿ywaæ wygenerowanych plików. Je¿eli masz jakie¶
			inne problemy skontaktuj siê z nami.
		</para>

		<para>
			Oto przyk³ad, który utworzy³em. Wywo³uje on funkcjê
			vq::ivq::dom_val w celu sprawdzenia poprawno¶ci nazwy 
			domeny:
<!--INSERT:../../examples/python/dom_val.py-->
<programlisting><![CDATA[
#!/usr/bin/env python
import sys
from omniORB import CORBA
import CosNaming
import vq

orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)

obj = orb.resolve_initial_references("NameService")
rootCtx = obj._narrow(CosNaming.NamingContext)

if rootCtx is None:
	print "Failed to narrow the root naming context"
	sys.exit(1)

name = [ CosNaming.NameComponent("vq::ivq", "") ]

try:
	obj = rootCtx.resolve(name)

except CosNaming.NamingContext.NotFound, ex:
	print "Name not found"
	sys.exit(1)

vqo = obj._narrow(vq.ivq)

if vqo is None:
	print "Object reference is not an vq::ivq"
	sys.exit(1)

dom = "123123.asd.com.pl"
err = vqo.dom_val(dom)

if err.ec is vq.ivq.err_no:
	print "It's a valid domain name"
else:
	print "It's an invalid domain name"

]]></programlisting>
			Poni¿szy skrypt uruchamia omniNames (serwer nazw),
			iauth (pgsqlauthd) oraz ivq (qmailvqd), po czym dom_val.py 
			(powy¿szy przyk³ad). Skrypt mo¿na równie¿ znale¼æ w
			<filename>examples/python</filename>.
<!--INSERT:../../examples/python/run-->
<programlisting><![CDATA[
#!/bin/sh
export BASE=../..
export VQ_HOME=.

export LD_LIBRARY_PATH="/tmp" 
cp -f $BASE/lib*/*.so* /tmp

host=localhost

echo "starting Naming Service daemon ..."
rm -f /tmp/omninames-*
omniNames -start 12456 -logdir /tmp &
nsd_pid=$!

trap "kill $nsd_pid" 0
sleep 2

echo "starting iauth(pgsqlauthd) server ..."
$BASE/base/pgsql/pgsqlauthd \
-ORBIIOPAddr inet:$host:44444 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
iauth_pid=$!
trap "kill $nsd_pid $iauth_pid" 0
sleep 2

echo -ORBInitRef NameService=corbaloc::$host:12453/NameService > etc/ivq/auth
echo "starting ivq(qmailvqd) server ..."
$BASE/base/qmailvqd/qmailvqd \
-ORBIIOPAddr inet:$host:33333 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
ivq_pid=$!

trap "kill $nsd_pid $iauth_pid $ivq_pid" 0
sleep 2

echo "running client ..."
./dom_val.py -ORBInitRef NameService=corbaloc::$host:12456/NameService

]]></programlisting>
			<note>
				<para>
					qmailvqd i pgsqlauthd skompilowa³em u¿ywaj±c MICO, a nie
					omniORB, wiêc jest to równie¿ przyk³ad wspó³dzia³ania
					ró¿nych implementacji CORBA :-)
				</para>
			</note>
		</para>
	</section>

	<section id="devs.java">
		<title>U¿ywanie v-q z poziomu Java</title>
		<para>
			<ulink url="http://java.sun.com">Java</ulink> jest jednym
			z najpopularniejszych jêzyków u¿ywanych do tworzenia
			systemów biznesowych.
		</para>

		<para>
			Java zawiera wbudowane wsparcie dla protoko³u CORBA. 
			Nie musisz instalowaæ dodatkowego oprogramowania, jedyne
			co potrzebujesz to SDK.
		</para>

		<para>
			Na pocz±tku nale¿y przet³umaczyæ pliki IDL na klasy
			jêzyka Java. Mo¿na to wykonaæ za pomoc± nastêpuj±cego
			polecenia:
<synopsis>idlj vq.idl</synopsis>
			To wygeneruje nastêpuj±ce pliki i katalogi:
<screen><computeroutput>
vq
vq/exceptHelper.java
vq/exceptHolder.java
vq/except.java
vq/db_errorHelper.java
vq/db_errorHolder.java
vq/db_error.java
vq/null_errorHelper.java
vq/null_errorHolder.java
vq/null_error.java
vq/_ivqStub.java
vq/ivqHolder.java
vq/ivqHelper.java
vq/ivq.java
vq/ivqPackage
vq/ivqPackage/quota_typeHelper.java
vq/ivqPackage/size_typeHelper.java
vq/ivqPackage/uif_typeHelper.java
vq/ivqPackage/user_conf_typeHelper.java
vq/ivqPackage/string_listHolder.java
vq/ivqPackage/string_listHelper.java
vq/ivqPackage/gid_typeHelper.java
vq/ivqPackage/uid_typeHelper.java
vq/ivqPackage/err_codeHolder.java
vq/ivqPackage/err_codeHelper.java
vq/ivqPackage/err_code.java
vq/ivqPackage/errorHelper.java
vq/ivqPackage/errorHolder.java
vq/ivqPackage/error.java
vq/ivqPackage/user_infoHelper.java
vq/ivqPackage/user_infoHolder.java
vq/ivqPackage/user_info.java
vq/ivqPackage/user_conf_infoHelper.java
vq/ivqPackage/user_conf_infoHolder.java
vq/ivqPackage/user_conf_info.java
vq/ivqPackage/user_conf_info_listHolder.java
vq/ivqPackage/user_conf_info_listHelper.java
vq/ivqPackage/email_bannedHelper.java
vq/ivqPackage/email_bannedHolder.java
vq/ivqPackage/email_banned.java
vq/ivqPackage/email_banned_listHolder.java
vq/ivqPackage/email_banned_listHelper.java
vq/ivqPackage/domain_infoHelper.java
vq/ivqPackage/domain_infoHolder.java
vq/ivqPackage/domain_info.java
vq/ivqPackage/domain_info_listHolder.java
vq/ivqPackage/domain_info_listHelper.java
vq/ivqOperations.java
</computeroutput></screen>
		</para>

		<para>
			Poni¿ej prosty przyk³ad, program wywo³uje funkcjê
			vq::ivq::dom_val w celu weryfikacji poprawno¶ci nazwy
			domeny:
<!--INSERT:../../examples/java/DomVal.java-->
<programlisting><![CDATA[
/**
 * Simple example of using v-q from Java
 * @author Pawe³ Niewiadomski
 */

import vq.*;
import vq.ivqPackage.*;
import org.omg.CORBA.*;
import org.omg.CosNaming.*;

public class DomVal {

	static public void main( String [] args ) throws Exception {
		ORB orb = ORB.init(args, null);

		org.omg.CORBA.Object obj = orb.resolve_initial_references("NameService");

		NamingContext rootCtx = NamingContextHelper.narrow(obj);
		if( rootCtx == null ) {
			System.out.println("Failed to narrow the root naming context");
			System.exit(1);
		}

		NameComponent name = new NameComponent("vq::ivq", "");
		NameComponent [] path = { name };
		ivq vqo = ivqHelper.narrow(rootCtx.resolve(path));
		
		String dom = "123123.asd.com.pl";
		error err = vqo.dom_val(dom);
		if( err.ec == err_code.err_no ) {
			System.out.println("It's a valid domain name");
		} else {
			System.out.println("It's an invalid domain name");
		}
		System.exit(0);
	}
}

]]></programlisting>
			Poni¿szy skrypt uruchamia omniNames (serwer nazw),
			iauth (pgsqlauthd) oraz ivq (qmailvqd), nastêpnie DomVal (powy¿szy
			przyk³ad). Program znajduje siê w <filename>examples/java</filename>.
<!--INSERT:../../examples/java/run-->
<programlisting><![CDATA[
#!/bin/sh
export BASE=../..
export VQ_HOME=.

export LD_LIBRARY_PATH="/tmp" 
cp -f $BASE/lib*/*.so* /tmp

host=localhost

echo "starting Naming Service daemon ..."
rm -f /tmp/omninames-*
omniNames -start 12456 -logdir /tmp &
nsd_pid=$!

trap "kill $nsd_pid" 0
sleep 2

echo "starting iauth(pgsqlauthd) server ..."
$BASE/base/pgsql/pgsqlauthd \
-ORBIIOPAddr inet:$host:44444 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
iauth_pid=$!
trap "kill $nsd_pid $iauth_pid" 0
sleep 2

echo -ORBInitRef NameService=corbaloc::$host:12453/NameService > etc/ivq/auth
echo "starting ivq(qmailvqd) server ..."
$BASE/base/qmailvqd/qmailvqd \
-ORBIIOPAddr inet:$host:33333 \
-ORBInitRef NameService=corbaloc::$host:12456/NameService . &
ivq_pid=$!

trap "kill $nsd_pid $iauth_pid $ivq_pid" 0
sleep 2

echo "running client ..."
java DomVal -ORBInitRef NameService=corbaloc::$host:12456/NameService

]]></programlisting>
			<note>
				<para>
					qmailvqd i pgsqlauthd skompilowane by³y przy wykorzystaniu
					biblioteki MICO, serwer nazw reprezentowany by³ przez
					<application>omniNames</application> z pakietu omniORB.
					Klient za¶ napisany by³ za pomoc± Java. Przyk³ad
					kompatybilno¶ci implementacji CORBA.
				</para>
			</note>
		</para>
	</section>

</chapter>
